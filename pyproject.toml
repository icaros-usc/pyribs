[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "ribs"
dynamic = ["version", "readme"]
authors = [
  { name = "ICAROS Lab pyribs Team", email = "team@pyribs.org" },
]
description = "A bare-bones Python library for quality diversity optimization."
license = "MIT"
keywords = ["ribs", "quality diversity", "optimization"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Mathematics",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.9.0"
dependencies = [
  "array_api_compat",
  "numba>=0.51.0",
  "numpy>=1.22.0",  # numpy>=1.22.0 is when Array API gains support.
  "numpy_groupies>=0.9.16",  # Supports Python 3.7 and up.
  "pandas>=1.0.0",
  "scikit-learn>=1.1.0",
  "scipy>=1.7.0",
  "sortedcontainers>=2.0.0",  # Primarily used in SlidingBoundariesArchive.
  "threadpoolctl>=3.0.0",
]

[project.optional-dependencies]
visualize = [
  "matplotlib>=3.0.0",
  "shapely>=2.0.0",
]
all = [
  ### visualize ###
  "matplotlib>=3.0.0",
  "shapely>=2.0.0",

  ### Extra dependencies used by various components. ###
  "cma",
  "pymoo",
]
dev = [
  # Tools
  "ruff",
  "pyright",
  "pre-commit",

  # Testing
  "python-box[all]~=7.0",
  "pytest==8.3.5",
  "pytest-cov==6.0.0",
  "pytest-benchmark==5.1.0",
  "pytest-xdist==3.6.1",

  # Documentation
  "myst-nb==1.3.0",
  "Sphinx==8.1.3",
  "sphinx-autobuild==2021.3.14",
  "sphinx-autodoc-typehints==3.0.1",
  "sphinx-jinja2-compat==0.4.1",
  "sphinx-prompt==1.9.0",
  "sphinx-tabs==3.4.5",
  "sphinx-toolbox==4.0.0",
  "sphinx_immaterial==0.13.5",
  "sphinxcontrib-applehelp==2.0.0",
  "sphinxcontrib-devhelp==2.0.0",
  "sphinxcontrib-htmlhelp==2.1.0",
  "sphinxcontrib-jsmath==1.0.1",
  "sphinxcontrib-qthelp==2.0.0",
  "sphinxcontrib-serializinghtml==2.0.0",
  "sphinxcontrib-svg2pdfconverter==1.3.0",
  "minify-html==0.15.0",
  "beautifulsoup4==4.13.4",

  # Distribution
  "build",
  "check-wheel-contents",
  "twine",
]

[project.urls]
Homepage = "https://pyribs.org"
Repository = "https://github.com/icaros-usc/pyribs"
Documentation = "https://docs.pyribs.org"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["ribs", "ribs.*"]

[tool.setuptools.dynamic]
version = {attr = "ribs.__version__"}
readme = {file = ["README.md", "HISTORY.md"], content-type = "text/markdown"}

[tool.ruff.lint]
# Reference: https://docs.astral.sh/ruff/rules/
select = [
  "B",  # flake8-bugbear
  "A",  # flake8-builtins
  "COM818",  # trailing-comma-on-bare-tuple
  "C4",  # flake8-comprehensions
  "EXE",  # flake8-executable
  "FA",  # flake8-future-annotations
  "PIE",  # flake8-pie
  "RSE",  # flake8-raise
  "SIM",  # flake8-simplify
  "TD",  # flake8-todos
  "ARG",  # flake8-unused-arguments
  "FLY",  # flynt
  "I",  # isort
  "NPY",  # numpy
  "PD",  # pandas-vet
  "PT",  # pytest
  "N",  # pep8-naming
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "UP",  # pyupgrade
  "RUF",  # ruff-specific rules
]
ignore = [
  "B024",  # abstract-base-class-without-abstract-method; we have base classes where no methods are abstract.
  "B027",  # empty-method-without-abstract-decorator; we have base class methods that are empty.
  "E501",  # line-too-long; we already have the formatter.
  "ARG002",  # unused-method-argument; we have many cases where arguments have to be included for API compatibility.
  "PD901",  # pandas-df-variable-name; this rule is actually deprecated in ruff.
  "RUF022",  # unsorted-dunder-all; we sort it ourselves.
  "SIM108",  # if-else-block-instead-of-if-exp; rather opinionated.
  "PT011",  # pytest-raises-too-broad
  "PT030",  # pytest-warns-too-broad
]

[tool.ruff.lint.pep8-naming]
ignore-names = [
  "F",  # torch.nn.functional
  "G",  # GAN generator
]

[tool.ruff.lint.isort]
known-first-party = ["ribs"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
python_files = "*_test.py"
python_functions = "test_*"
addopts = "-v --cov-report term-missing --cov=ribs"
markers = "style"

[tool.pyright]
include = ["ribs"]
