"""Provides EmitterBase."""

import numpy as np


class EmitterBase:
    """Base class for emitters.

    Args:
        solution_dim (int): The (1D) dimension of solutions produced by this
            emitter.
        batch_size (int): Number of solutions to generate on each call to ask().
        archive (ribs.archives.ArchiveBase): An archive to use when creating and
            inserting solutions. For instance, this can be
            :class:`ribs.archives.GridArchive`.
        seed (float or int): Seed for the random number generator. None
            (default) means no seed.
    Attributes:
        _rng (np.random.Generator): Random number generator.
        _archive (ribs.archives.ArchiveBase): See ``archive`` arg.
        solution_dim (int): See args.
        batch_size (int): See args.
    """

    def __init__(self, solution_dim, batch_size, archive, seed=None):
        self._rng = np.random.default_rng(seed)
        self._archive = archive
        self.solution_dim = solution_dim
        self.batch_size = batch_size

    def ask(self):
        """Generates ``self.batch_size`` solutions."""
        raise NotImplementedError

    def tell(self, solutions, objective_values, behavior_values):
        """Gives the emitter results from evaluating several solutions.

        These solutions are then inserted into the archive.

        Args:
            solutions (np.ndarray): Array of solutions generated by this
                emitter's :meth:`ask()` method.
            objective_values (np.ndarray): 1D array containing the objective
                function value of each solution.
            behavior_values (np.ndarray): ``(n, <behavior space dimension>)``
                array with the behavior space coordinates of each solution.
        """
        for sol, obj, beh in zip(solutions, objective_values, behavior_values):
            self._archive.add(sol, obj, beh)
