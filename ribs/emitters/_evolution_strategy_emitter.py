"""Provides the EvolutionStrategyEmitter."""
import numpy as np
from numba import jit

from ribs.emitters._emitter_base import EmitterBase


class EvolutionStrategyEmitter(EmitterBase):

    def __init__(
            self,
            archive,
            x0,
            sigma0,
            ranker,
            selector,
            evolution_strategy,
            restart_rule="no_improvement",
            # weight_rule="truncation",
            bounds=None,
            batch_size=None,
            seed=None):
        self._rng = np.random.default_rng(seed)
        self._x0 = np.array(x0, dtype=archive.dtype)
        self._sigma0 = sigma0
        EmitterBase.__init__(
            self,
            archive,
            len(self._x0),
            bounds,
        )

        self.selector = selector

        if restart_rule not in ["basic", "no_improvement"]:
            raise ValueError(f"Invalid restart_rule {restart_rule}")
        self._restart_rule = restart_rule

        # opt_seed = None if seed is None else self._rng.integers(10_000)
        self.opt = evolution_strategy
        # CMAEvolutionStrategy(sigma0, batch_size, self._solution_dim,
        #                                 weight_rule, opt_seed,
        #                                 self.archive.dtype)
        self.opt.reset(self._x0)
        # self._num_parents = (self.batch_size //
        #                      2 if selection_rule == "mu" else None)
        self._target_behavior_dir = self._generate_random_direction()
        self._batch_size = batch_size
        self._ranker = ranker
        self._selector = selector
        self._restarts = 0  # Currently not exposed publicly.

    @property
    def x0(self):
        """numpy.ndarray: Initial solution for the optimizer."""
        return self._x0

    @property
    def sigma0(self):
        """float: Initial step size for the CMA-ES optimizer."""
        return self._sigma0

    @property
    def batch_size(self):
        """int: Number of solutions to return in :meth:`ask`."""
        return self._batch_size

    def ask(self):
        """Samples new solutions from a multivariate Gaussian.

        The multivariate Gaussian is parameterized by the CMA-ES optimizer.

        Returns:
            ``(batch_size, solution_dim)`` array -- contains ``batch_size`` new
            solutions to evaluate.
        """
        return self.opt.ask(self.lower_bounds, self.upper_bounds)

    def _generate_random_direction(self):
        """Generates a new random direction in the behavior space.

        The direction is sampled from a standard Gaussian -- since the standard
        Gaussian is isotropic, there is equal probability for any direction. The
        direction is then scaled to the behavior space bounds.
        """
        ranges = self.archive.upper_bounds - self.archive.lower_bounds
        behavior_dim = len(ranges)
        unscaled_dir = self._rng.standard_normal(behavior_dim)
        return unscaled_dir * ranges

    def _check_restart(self, num_parents):
        """Emitter-side checks for restarting the optimizer.

        The optimizer also has its own checks.
        """
        if self._restart_rule == "no_improvement":
            return num_parents == 0
        return False

    def tell(self, solutions, objective_values, behavior_values, metadata=None):
        """Gives the emitter results from evaluating solutions.

        As we insert solutions into the archive, we record the solutions'
        projection onto the random direction in behavior space, as well as
        whether the solution was added to the archive. When using "filter"
        selection, we rank the solutions first by whether they were added, and
        second by the projection, and when using "mu" selection, we rank solely
        by projection. We then pass the ranked solutions to the underlying
        CMA-ES optimizer to update the search parameters.

        Args:
            solutions (numpy.ndarray): Array of solutions generated by this
                emitter's :meth:`ask()` method.
            objective_values (numpy.ndarray): 1D array containing the objective
                function value of each solution.
            behavior_values (numpy.ndarray): ``(n, <behavior space dimension>)``
                array with the behavior space coordinates of each solution.
            metadata (numpy.ndarray): 1D object array containing a metadata
                object for each solution.
        """
        # Tuples of (solution was added, projection onto random direction,
        # index).
        ranking_data = []
        new_sols = 0

        # Add solutions to the archive.
        metadata = itertools.repeat(None) if metadata is None else metadata
        # Tupe of (add status, add value)
        add_data = []
        for i, (sol, obj, beh, meta) in enumerate(
                zip(solutions, objective_values, behavior_values, metadata)):
            add_data.append(self.archive.add(sol, obj, beh, meta))

        indices = self._ranker.rank(self, self._archive, solutions,
                                    objective_values, behavior_values, metadata,
                                    add_data[0], add_data[1])
        # added = bool(status)
        # projection = np.dot(beh, self._target_behavior_dir)
        # ranking_data.append((added, projection, i))
        # if added:
        #     new_sols += 1

        # if self._selection_rule == "filter":
        #     # Sort by whether the solution was added into the archive, followed
        #     # by projection.
        #     def key(x):
        #         return (x[0], x[1])
        # elif self._selection_rule == "mu":
        #     # Sort only by projection.
        #     def key(x):
        #         return x[1]

        # ranking_data.sort(reverse=True, key=key)
        # indices = [d[2] for d in ranking_data]

        num_parents = self._selector.select(self, self._archive, solutions,
                                            objective_values, behavior_values,
                                            metadata, add_data[0], add_data[1])
        # (new_sols if self._selection_rule == "filter" else self._num_parents)

        self.opt.tell(solutions[indices], num_parents)

        # Check for reset.
        if (self.opt.check_stop(
            [projection for status, projection, i in ranking_data]) or
                self._check_restart(new_sols)):
            new_x0 = self.archive.sample_elites(1).solution_batch[0]
            self.opt.reset(new_x0)
            self._target_behavior_dir = self._generate_random_direction()
            self._ranker.reset()
            self._restarts += 1
