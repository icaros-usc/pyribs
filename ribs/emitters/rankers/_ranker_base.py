"""Provides the RankerBase."""
from abc import ABC, abstractmethod


class RankerBase(ABC):
    """Base class for rankers.

    Every ranker has an :meth:`rank` method that returns a list of indices
    that indicate how the solutions should be ranked and an :meth:`reset` method
    that resets the internal state of the ranker
    (i.e. in :class:`ribs.emitters.rankers._random_direction_ranker`).

    Child classes are only required to override :meth:`rank`.
    """

    @abstractmethod
    def rank(self, emitter, archive, solutions, objective_values,
             behavior_values, metadata, add_statuses, add_values):
        """Generate a list of indices that represents an ordering of solutions

        Args:
            emitter (ribs.emitters.EmitterBase): The emitter that this ranker
                object is associated with.
            archive (ribs.archives.ArchiveBase): An archive to use when creating
                and inserting solutions. For instance, this can be
                :class:`ribs.archives.GridArchive`.
            solutions (numpy.ndarray): Array of solutions generated by this
                emitter's :meth:`ask()` method.
            objective_values (numpy.ndarray): 1D array containing the objective
                function value of each solution.
            behavior_values (numpy.ndarray): ``(n, <behavior space dimension>)``
                array with the behavior space coordinates of each solution.
            metadata (numpy.ndarray): 1D object array containing a metadata
                object for each solution.
            add_statuses ():
            add_values ():

        Returns:
            indices: which represent the descending order of the solutions
        """

    def reset(self, archive, emitter):
        """Resets the internal state of the ranker

        Args:
            emitter (ribs.emitters.EmitterBase): The emitter that this ranker
                object is associated with.
            archive (ribs.archives.ArchiveBase): An archive to use when creating
                and inserting solutions. For instance, this can be
                :class:`ribs.archives.GridArchive`.
        """
